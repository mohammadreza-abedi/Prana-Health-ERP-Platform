import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Card, CardContent, CardHeader, CardTitle, CardFooter, CardDescription 
} from '@/components/ui/card';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Slider } from '@/components/ui/slider';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { 
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,
  LineChart, Line, AreaChart, Area, PieChart, Pie, Cell, Radar, RadarChart, PolarGrid,
  PolarAngleAxis, PolarRadiusAxis, Scatter, ScatterChart, ZAxis, Treemap, 
  ComposedChart, Sankey, RadialBarChart, RadialBar 
} from 'recharts';
import {
  Calendar,
  ChevronLeft,
  ChevronRight,
  ChevronsUpDown,
  Download,
  Filter,
  RefreshCcw,
  Plus,
  Zap,
  Rocket,
  BarChart3,
  LineChart as LineChartIcon,
  PieChart as PieChartIcon,
  Activity,
  Users,
  Layers,
  ArrowUp,
  ArrowDown,
  TrendingUp,
  TrendingDown,
  Award,
  Heart,
  AlertCircle,
  Clock,
  Calendar as CalendarIcon,
  Bell,
  CheckCircle,
  Flag,
  ThumbsUp,
  Speech,
  Target,
  Gauge,
  Clipboard,
  FileText,
  Share2,
  Save,
  Eye,
  Info,
  HelpCircle,
  Settings,
  UserPlus,
  ShieldCheck,
  Map,
  Globe,
  Building,
  TreePine,
  Droplets,
  Wind,
  Sun,
  CloudDrizzle,
  Factory,
  Maximize2,
  X,
  Moon,
  LayoutGrid,
  LayoutList,
  GraduationCap,
  Share
} from 'lucide-react';

// داده‌های ساختگی برای نمودارها و گراف‌ها
const healthMetricsData = [
  { name: 'فروردین', کارخانه_A: 4000, کارخانه_B: 2400, امتیاز_ایمنی: 90 },
  { name: 'اردیبهشت', کارخانه_A: 3000, کارخانه_B: 1398, امتیاز_ایمنی: 82 },
  { name: 'خرداد', کارخانه_A: 2000, کارخانه_B: 9800, امتیاز_ایمنی: 75 },
  { name: 'تیر', کارخانه_A: 2780, کارخانه_B: 3908, امتیاز_ایمنی: 88 },
  { name: 'مرداد', کارخانه_A: 1890, کارخانه_B: 4800, امتیاز_ایمنی: 94 },
  { name: 'شهریور', کارخانه_A: 2390, کارخانه_B: 3800, امتیاز_ایمنی: 98 },
  { name: 'مهر', کارخانه_A: 3490, کارخانه_B: 4300, امتیاز_ایمنی: 92 },
  { name: 'آبان', کارخانه_A: 2000, کارخانه_B: 1908, امتیاز_ایمنی: 85 },
  { name: 'آذر', کارخانه_A: 2780, کارخانه_B: 4800, امتیاز_ایمنی: 78 },
  { name: 'دی', کارخانه_A: 1890, کارخانه_B: 3800, امتیاز_ایمنی: 82 },
  { name: 'بهمن', کارخانه_A: 2390, کارخانه_B: 3800, امتیاز_ایمنی: 89 },
  { name: 'اسفند', کارخانه_A: 3490, کارخانه_B: 4300, امتیاز_ایمنی: 93 },
];

const departmentSafetyData = [
  { name: 'تولید', امتیاز: 85, تکمیل: 75 },
  { name: 'انبار', امتیاز: 92, تکمیل: 89 },
  { name: 'خط مونتاژ', امتیاز: 78, تکمیل: 82 },
  { name: 'تعمیرات', امتیاز: 68, تکمیل: 75 },
  { name: 'اداری', امتیاز: 96, تکمیل: 94 },
  { name: 'R&D', امتیاز: 88, تکمیل: 85 },
  { name: 'کنترل کیفیت', امتیاز: 90, تکمیل: 87 },
];

const incidentTypeData = [
  { name: 'لغزش و سقوط', مقدار: 35 },
  { name: 'برخورد با اشیاء', مقدار: 22 },
  { name: 'حوادث برقی', مقدار: 15 },
  { name: 'مواد شیمیایی', مقدار: 10 },
  { name: 'بلند کردن نادرست', مقدار: 18 },
];

const COLORS = ['#2EC4B6', '#52C4B9', '#FFBB00', '#FF9500', '#D72638'];

const environmentalData = [
  { subject: 'کیفیت هوا', A: 85, B: 90, fullMark: 100 },
  { subject: 'مصرف انرژی', A: 68, B: 85, fullMark: 100 },
  { subject: 'بازیافت مواد', A: 90, B: 75, fullMark: 100 },
  { subject: 'مصرف آب', A: 72, B: 95, fullMark: 100 },
  { subject: 'آلودگی صوتی', A: 80, B: 70, fullMark: 100 },
  { subject: 'مدیریت پسماند', A: 75, B: 88, fullMark: 100 },
];

const trainingCompletionData = [
  { name: 'گروه 1', امتیاز: 75 },
  { name: 'گروه 2', امتیاز: 89 },
  { name: 'گروه 3', امتیاز: 96 },
  { name: 'گروه 4', امتیاز: 82 },
  { name: 'گروه 5', امتیاز: 65 },
  { name: 'گروه 6', امتیاز: 78 },
];

const riskAssessmentData = [
  {
    name: 'ریسک‌های بالا', 
    فروردین: 25, اردیبهشت: 23, خرداد: 20, تیر: 16, 
    مرداد: 15, شهریور: 18, مهر: 22, آبان: 21,
    آذر: 18, دی: 15, بهمن: 12, اسفند: 10
  },
  {
    name: 'ریسک‌های متوسط', 
    فروردین: 45, اردیبهشت: 42, خرداد: 40, تیر: 35, 
    مرداد: 32, شهریور: 30, مهر: 28, آبان: 25,
    آذر: 30, دی: 31, بهمن: 35, اسفند: 38
  },
  {
    name: 'ریسک‌های پایین', 
    فروردین: 30, اردیبهشت: 35, خرداد: 40, تیر: 49, 
    مرداد: 53, شهریور: 52, مهر: 50, آبان: 54,
    آذر: 52, دی: 54, بهمن: 53, اسفند: 52
  },
];

const healthIndexScoreData = [
  { name: 'شاخص A', امتیاز: 75, میانگین: 80 },
  { name: 'شاخص B', امتیاز: 80, میانگین: 75 },
  { name: 'شاخص C', امتیاز: 90, میانگین: 85 },
  { name: 'شاخص D', امتیاز: 65, میانگین: 70 },
  { name: 'شاخص E', امتیاز: 85, میانگین: 80 },
  { name: 'شاخص F', امتیاز: 70, میانگین: 75 },
];

const complianceByLocationData = [
  { name: 'کارخانه 1', نسبت: 0.92 },
  { name: 'کارخانه 2', نسبت: 0.85 },
  { name: 'کارخانه 3', نسبت: 0.79 },
  { name: 'کارخانه 4', نسبت: 0.96 },
  { name: 'کارخانه 5', نسبت: 0.88 },
  { name: 'کارخانه 6', نسبت: 0.82 },
  { name: 'کارخانه 7', نسبت: 0.91 },
];

const airQualityData = [
  { name: 'فروردین', AQI: 55, دما: 18, رطوبت: 65 },
  { name: 'اردیبهشت', AQI: 65, دما: 22, رطوبت: 60 },
  { name: 'خرداد', AQI: 80, دما: 28, رطوبت: 55 },
  { name: 'تیر', AQI: 95, دما: 32, رطوبت: 50 },
  { name: 'مرداد', AQI: 110, دما: 35, رطوبت: 45 },
  { name: 'شهریور', AQI: 95, دما: 30, رطوبت: 50 },
  { name: 'مهر', AQI: 75, دما: 25, رطوبت: 60 },
  { name: 'آبان', AQI: 60, دما: 18, رطوبت: 65 },
  { name: 'آذر', AQI: 45, دما: 12, رطوبت: 70 },
  { name: 'دی', AQI: 40, دما: 8, رطوبت: 75 },
  { name: 'بهمن', AQI: 45, دما: 10, رطوبت: 70 },
  { name: 'اسفند', AQI: 50, دما: 15, رطوبت: 68 },
];

const safetyAuditData = [
  { name: 'دوره 1', امتیاز: 78, استاندارد: 75 },
  { name: 'دوره 2', امتیاز: 82, استاندارد: 75 },
  { name: 'دوره 3', امتیاز: 86, استاندارد: 80 },
  { name: 'دوره 4', امتیاز: 84, استاندارد: 80 },
  { name: 'دوره 5', امتیاز: 90, استاندارد: 85 },
  { name: 'دوره 6', امتیاز: 88, استاندارد: 85 },
  { name: 'دوره 7', امتیاز: 92, استاندارد: 85 },
  { name: 'دوره 8', امتیاز: 94, استاندارد: 90 },
];

const budgetAllocationData = [
  { name: 'آموزش', مقدار: 25, fill: '#2EC4B6' },
  { name: 'تجهیزات', مقدار: 35, fill: '#52C4B9' },
  { name: 'پایش', مقدار: 18, fill: '#FFBB00' },
  { name: 'مشاوره', مقدار: 12, fill: '#FF9500' },
  { name: 'متفرقه', مقدار: 10, fill: '#D72638' },
];

const keyPerformanceIndicators = [
  { 
    title: 'شاخص HSE سازمانی', 
    value: 94, 
    change: 12, 
    trend: 'up',
    description: 'بهبود 12% نسبت به دوره قبل',
    icon: <ShieldCheck className="h-5 w-5 text-emerald-500" />,
    color: 'emerald',
    isPrimary: true
  },
  { 
    title: 'حوادث بدون توقف کار', 
    value: 5, 
    change: -35, 
    trend: 'down',
    description: 'کاهش 35% نسبت به دوره قبل',
    icon: <AlertCircle className="h-5 w-5 text-amber-500" />,
    color: 'amber',
    details: '2 مورد کمتر از ماه گذشته'
  },
  { 
    title: 'روزهای بدون حادثه', 
    value: 183, 
    change: 15, 
    trend: 'up',
    description: '6 ماه بدون حادثه اصلی',
    icon: <Clock className="h-5 w-5 text-blue-500" />,
    color: 'blue',
    details: 'رکورد جدید برای واحد تولید'
  },
  { 
    title: 'شاخص زیست محیطی', 
    value: 89, 
    change: 8, 
    trend: 'up',
    description: 'بهبود 8% نسبت به دوره قبل',
    icon: <TreePine className="h-5 w-5 text-tiffany" />,
    color: 'tiffany',
    details: 'کاهش کربن در تمام واحدها'
  },
  { 
    title: 'تکمیل آموزش‌های HSE', 
    value: 92, 
    change: 7, 
    trend: 'up',
    description: 'بهبود 7% نسبت به دوره قبل',
    icon: <Award className="h-5 w-5 text-violet-500" />,
    color: 'violet',
    details: '24 دوره آموزشی تکمیل شده'
  },
  { 
    title: 'ممیزی‌های داخلی', 
    value: 97, 
    change: 4, 
    trend: 'up',
    description: 'بهبود 4% نسبت به دوره قبل',
    icon: <Clipboard className="h-5 w-5 text-indigo-500" />,
    color: 'indigo',
    details: '32 مورد ممیزی کامل شده'
  },
  { 
    title: 'گزارش‌های شبه حادثه', 
    value: 76, 
    change: 18, 
    trend: 'up',
    description: '18% افزایش گزارش‌دهی',
    icon: <Flag className="h-5 w-5 text-rose-500" />,
    color: 'rose',
    details: 'مشارکت فعال کارکنان'
  },
  { 
    title: 'شاخص کیفیت هوا', 
    value: 87, 
    change: 5, 
    trend: 'up',
    description: 'بهبود 5% نسبت به دوره قبل',
    icon: <Wind className="h-5 w-5 text-cyan-500" />,
    color: 'cyan',
    details: 'کاهش آلاینده‌های صنعتی'
  }
];

const healthAlerts = [
  {
    id: 1,
    title: 'هشدار گرمازدگی',
    description: 'پیش‌بینی دمای بالای 38 درجه در روز آینده. لطفا تمهیدات لازم را بیندیشید.',
    level: 'high',
    time: '2 ساعت پیش',
    icon: <Sun className="h-5 w-5" />
  },
  {
    id: 2,
    title: 'شاخص آلودگی هوا',
    description: 'شاخص کیفیت هوا در محدوده هشدار قرار دارد. استفاده از ماسک توصیه می‌شود.',
    level: 'medium',
    time: '4 ساعت پیش',
    icon: <Wind className="h-5 w-5" />
  },
  {
    id: 3,
    title: 'یادآوری معاینات دوره‌ای',
    description: 'معاینات دوره‌ای کارکنان بخش تولید در هفته آینده انجام می‌شود.',
    level: 'info',
    time: '1 روز پیش',
    icon: <Calendar className="h-5 w-5" />
  },
  {
    id: 4,
    title: 'بروزرسانی دستورالعمل‌ها',
    description: 'دستورالعمل‌های جدید ایمنی در بخش تعمیرات به‌روزرسانی شد.',
    level: 'info',
    time: '2 روز پیش',
    icon: <FileText className="h-5 w-5" />
  }
];

const recentActivities = [
  {
    id: 1,
    title: 'بازرسی دوره‌ای',
    description: 'بازرسی دوره‌ای بخش تولید انجام شد',
    time: '30 دقیقه پیش',
    icon: <CheckCircle className="h-5 w-5 text-emerald-500" />
  },
  {
    id: 2,
    title: 'گزارش حادثه',
    description: 'یک حادثه جزئی در بخش انبار گزارش شد',
    time: '2 ساعت پیش',
    icon: <Flag className="h-5 w-5 text-rose-500" />
  },
  {
    id: 3,
    title: 'آموزش ایمنی',
    description: 'جلسه آموزش ایمنی برای کارکنان جدید برگزار شد',
    time: '1 روز پیش',
    icon: <Users className="h-5 w-5 text-blue-500" />
  },
  {
    id: 4,
    title: 'تعویض تجهیزات',
    description: 'سیستم‌های تهویه بخش تولید به‌روزرسانی شدند',
    time: '3 روز پیش',
    icon: <RefreshCcw className="h-5 w-5 text-amber-500" />
  }
];

const upcomingEvents = [
  {
    id: 1,
    title: 'مانور اضطراری',
    date: '2 فروردین',
    time: '10:00',
    location: 'تمام بخش‌ها',
    type: 'emergency'
  },
  {
    id: 2,
    title: 'آموزش اطفاء حریق',
    date: '8 فروردین',
    time: '14:00',
    location: 'سالن آموزش',
    type: 'training'
  },
  {
    id: 3,
    title: 'ممیزی ISO 45001',
    date: '15 فروردین',
    time: '9:00',
    location: 'اتاق جلسات مرکزی',
    type: 'audit'
  },
  {
    id: 4,
    title: 'کارگاه ارگونومی',
    date: '22 فروردین',
    time: '13:30',
    location: 'سالن کنفرانس',
    type: 'workshop'
  }
];

const taskCompletionData = [
  { name: 'وظیفه 1', تکمیل: 95 },
  { name: 'وظیفه 2', تکمیل: 85 },
  { name: 'وظیفه 3', تکمیل: 100 },
  { name: 'وظیفه 4', تکمیل: 75 },
  { name: 'وظیفه 5', تکمیل: 90 },
  { name: 'وظیفه 6', تکمیل: 80 },
  { name: 'وظیفه 7', تکمیل: 70 },
  { name: 'وظیفه 8', تکمیل: 60 },
];

// نوار اصلی (header) داشبورد با فیلترهای پیشرفته
const DashboardHeader: React.FC = () => {
  return (
    <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6 space-y-4 lg:space-y-0">
      <div>
        <h1 className="text-2xl font-bold flex items-center text-slate-800 dark:text-slate-100 relative">
          <div className="absolute -right-7 -top-7 w-16 h-16 rounded-full bg-gradient-to-r from-tiffany-light/20 to-tiffany/10 blur-xl"></div>
          <ShieldCheck className="inline-block ml-2 h-7 w-7 text-tiffany bg-tiffany/10 p-1 rounded-lg" />
          <span className="relative">
            داشبورد هوشمند HSE
            <div className="absolute h-1 w-12 bg-gradient-to-r from-tiffany to-tiffany-light rounded-full -bottom-1 right-0"></div>
          </span>
          <Badge className="mr-3 bg-gradient-to-r from-amber-500 to-amber-400 text-white border-none text-xs font-medium">نسخه 2.5</Badge>
        </h1>
        <p className="text-slate-500 dark:text-slate-400 mt-2.5 flex items-center">
          <CheckCircle className="inline-block ml-1.5 h-4 w-4 text-emerald-500" />
          تحلیل هوشمند شاخص‌های ایمنی، بهداشت و محیط زیست با هوش مصنوعی
        </p>
      </div>

      <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 sm:space-x-reverse">
        <div className="flex flex-wrap gap-2">
          {/* سلکت زمانی با افکت مدرن */}
          <div className="relative">
            <div className="absolute right-3 top-2.5">
              <CalendarIcon className="h-5 w-5 text-tiffany" />
            </div>
            <Select defaultValue="فروردین - اسفند 1403">
              <SelectTrigger className="h-10 pl-3 pr-10 min-w-[240px] border border-slate-200/60 dark:border-slate-700/40 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm shadow-sm rounded-xl">
                <SelectValue placeholder="انتخاب بازه زمانی" />
              </SelectTrigger>
              <SelectContent className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-md border-slate-200/60 dark:border-slate-700/40 rounded-xl shadow-lg">
                <SelectItem value="فروردین - اسفند 1403">فروردین - اسفند 1403</SelectItem>
                <SelectItem value="فروردین - اسفند 1402">فروردین - اسفند 1402</SelectItem>
                <SelectItem value="فروردین - اسفند 1401">فروردین - اسفند 1401</SelectItem>
                <SelectItem value="شش_ماه_گذشته">شش ماه گذشته</SelectItem>
                <SelectItem value="سه_ماه_گذشته">سه ماه گذشته</SelectItem>
                <SelectItem value="ماه_جاری">ماه جاری</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* سلکت مکان با افکت مدرن */}
          <div className="relative">
            <div className="absolute right-3 top-2.5">
              <Building className="h-5 w-5 text-blue-500" />
            </div>
            <Select defaultValue="همه_مکان‌ها">
              <SelectTrigger className="h-10 pl-3 pr-10 min-w-[200px] border border-slate-200/60 dark:border-slate-700/40 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm shadow-sm rounded-xl">
                <SelectValue placeholder="انتخاب مکان" />
              </SelectTrigger>
              <SelectContent className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-md border-slate-200/60 dark:border-slate-700/40 rounded-xl shadow-lg">
                <SelectItem value="همه_مکان‌ها">همه مکان‌ها</SelectItem>
                <SelectItem value="کارخانه_1">کارخانه شماره 1</SelectItem>
                <SelectItem value="کارخانه_2">کارخانه شماره 2</SelectItem>
                <SelectItem value="انبار">انبار مرکزی</SelectItem>
                <SelectItem value="اداری">ساختمان اداری</SelectItem>
                <SelectItem value="آزمایشگاه">آزمایشگاه تحقیق و توسعه</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* سلکت دپارتمان با افکت مدرن */}
          <div className="relative">
            <div className="absolute right-3 top-2.5">
              <Users className="h-5 w-5 text-violet-500" />
            </div>
            <Select defaultValue="همه_دپارتمان‌ها">
              <SelectTrigger className="h-10 pl-3 pr-10 min-w-[220px] border border-slate-200/60 dark:border-slate-700/40 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm shadow-sm rounded-xl">
                <SelectValue placeholder="انتخاب دپارتمان" />
              </SelectTrigger>
              <SelectContent className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-md border-slate-200/60 dark:border-slate-700/40 rounded-xl shadow-lg">
                <SelectItem value="همه_دپارتمان‌ها">همه دپارتمان‌ها</SelectItem>
                <SelectItem value="تولید">تولید</SelectItem>
                <SelectItem value="تعمیرات">تعمیرات و نگهداری</SelectItem>
                <SelectItem value="کنترل_کیفیت">کنترل کیفیت</SelectItem>
                <SelectItem value="منابع_انسانی">منابع انسانی</SelectItem>
                <SelectItem value="ایمنی">ایمنی و بهداشت</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="flex flex-wrap gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            className="h-10 px-3 border-slate-200/60 dark:border-slate-700/40 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-xl hover:bg-tiffany/10 hover:border-tiffany/30 transition-all duration-300 hover:shadow-md"
          >
            <Filter className="h-4 w-4 ml-2 text-tiffany" />
            فیلترهای پیشرفته
          </Button>
          
          <Button 
            variant="outline" 
            size="sm" 
            className="h-10 px-3 border-slate-200/60 dark:border-slate-700/40 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-xl hover:bg-amber-500/10 hover:border-amber-500/30 transition-all duration-300 hover:shadow-md"
          >
            <Download className="h-4 w-4 ml-2 text-amber-500" />
            خروجی گزارش
          </Button>
          
          <Button 
            variant="outline" 
            size="sm" 
            className="h-10 px-3 border-slate-200/60 dark:border-slate-700/40 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-xl hover:bg-blue-500/10 hover:border-blue-500/30 transition-all duration-300 hover:shadow-md group"
          >
            <RefreshCcw className="h-4 w-4 text-blue-500 group-hover:rotate-180 transition-transform duration-500" />
          </Button>
          
          <Button 
            variant="outline" 
            size="sm" 
            className="h-10 px-3 border-slate-200/60 dark:border-slate-700/40 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-xl hover:bg-emerald-500/10 hover:border-emerald-500/30 transition-all duration-300 hover:shadow-md"
          >
            <Target className="h-4 w-4 ml-2 text-emerald-500" />
            تنظیم اهداف
          </Button>
        </div>
      </div>
    </div>
  );
};

// کارت‌های شاخص‌های کلیدی عملکرد HSE
const KeyPerformanceCards: React.FC = () => {
  // جدا کردن کارت اصلی و فرعی‌ها
  const primaryKPI = keyPerformanceIndicators.find(kpi => kpi.isPrimary);
  const secondaryKPIs = keyPerformanceIndicators.filter(kpi => !kpi.isPrimary).slice(0, 7);
  
  return (
    <div className="mb-6">
      {/* شاخص اصلی در نوار بالایی با طراحی متمایز */}
      {primaryKPI && (
        <div className="mb-4">
          <Card className="glass overflow-hidden border border-emerald-100 dark:border-emerald-900/30 bg-gradient-to-br from-white/80 to-emerald-50/30 dark:from-slate-800/90 dark:to-emerald-900/10 shadow-md">
            <CardContent className="p-4 sm:p-6">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center">
                    <div className="p-3 mr-4 rounded-xl bg-gradient-to-br from-emerald-50 to-emerald-100 dark:from-emerald-900/40 dark:to-emerald-800/20 shadow-sm">
                      {primaryKPI.icon}
                    </div>
                    <div>
                      <h3 className="text-lg font-semibold text-slate-700 dark:text-slate-200 flex items-center">
                        {primaryKPI.title}
                        <Badge className="mr-2 bg-emerald-100 text-emerald-700 dark:bg-emerald-900/60 dark:text-emerald-100 border-none text-xs">اصلی</Badge>
                      </h3>
                      <p className="text-sm text-slate-500 dark:text-slate-400">{primaryKPI.description}</p>
                    </div>
                  </div>
                </div>
                <div className="flex items-center">
                  <div className="text-center px-4">
                    <div className="text-4xl font-black text-emerald-600 dark:text-emerald-400">{primaryKPI.value}</div>
                    <div className={`flex items-center justify-center text-sm font-medium ${
                      primaryKPI.trend === 'up' ? 'text-emerald-500' : 'text-rose-500'
                    }`}>
                      {primaryKPI.trend === 'up' ? (
                        <ArrowUp className="h-4 w-4 ml-1" />
                      ) : (
                        <ArrowDown className="h-4 w-4 ml-1" />
                      )}
                      {Math.abs(primaryKPI.change)}%
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-4">
                <div className="relative pt-2">
                  <div className="absolute top-0 right-0 left-0 flex justify-between text-xs text-slate-500 dark:text-slate-400">
                    <span>0</span>
                    <span>50</span>
                    <span>100</span>
                  </div>
                  <div className="relative h-2.5 mt-4 rounded-full bg-slate-100 dark:bg-slate-700 overflow-hidden">
                    <div
                      className="absolute top-0 left-0 bottom-0 bg-gradient-to-r from-emerald-500 to-emerald-400 rounded-full transition-all duration-500 ease-in-out"
                      style={{ width: `${primaryKPI.value}%` }}
                    />
                  </div>
                </div>
                
                <div className="mt-3 text-xs text-slate-500 dark:text-slate-400 flex items-center justify-between">
                  <span className="flex items-center">
                    <span className="inline-block w-3 h-3 bg-emerald-500 rounded-full mr-1"></span>
                    امتیاز فعلی: {primaryKPI.value}
                  </span>
                  <span className="flex items-center">
                    <span className="inline-block w-3 h-3 bg-slate-300 dark:bg-slate-600 rounded-full mr-1"></span>
                    هدف: 100
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
      
      {/* سایر شاخص‌ها در گرید */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        {secondaryKPIs.map((kpi, index) => {
          type ColorKey = 'emerald' | 'amber' | 'blue' | 'tiffany' | 'violet' | 'indigo' | 'rose' | 'cyan';
          
          const colorMap: Record<ColorKey, string> = {
            emerald: 'text-emerald-500 bg-emerald-50 dark:bg-emerald-900/20',
            amber: 'text-amber-500 bg-amber-50 dark:bg-amber-900/20',
            blue: 'text-blue-500 bg-blue-50 dark:bg-blue-900/20',
            tiffany: 'text-tiffany bg-tiffany/10 dark:bg-tiffany/5',
            violet: 'text-violet-500 bg-violet-50 dark:bg-violet-900/20',
            indigo: 'text-indigo-500 bg-indigo-50 dark:bg-indigo-900/20',
            rose: 'text-rose-500 bg-rose-50 dark:bg-rose-900/20',
            cyan: 'text-cyan-500 bg-cyan-50 dark:bg-cyan-900/20',
          };
          
          const progressColorMap: Record<ColorKey, string> = {
            emerald: 'from-emerald-500 to-emerald-400',
            amber: 'from-amber-500 to-amber-400',
            blue: 'from-blue-500 to-blue-400',
            tiffany: 'from-tiffany to-tiffany-light',
            violet: 'from-violet-500 to-violet-400',
            indigo: 'from-indigo-500 to-indigo-400',
            rose: 'from-rose-500 to-rose-400',
            cyan: 'from-cyan-500 to-cyan-400',
          };
          
          const safeColor = (kpi.color as ColorKey) || 'tiffany';
          const iconBgColor = colorMap[safeColor];
          const progressColor = progressColorMap[safeColor];
          
          return (
            <Card 
              key={index} 
              className="glass overflow-hidden border border-slate-200/60 dark:border-slate-700/40 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm hover:shadow-md transition-shadow duration-300"
            >
              <CardContent className="p-5">
                <div className="flex justify-between items-start">
                  <div>
                    <p className="text-sm font-medium text-slate-500 dark:text-slate-400">{kpi.title}</p>
                    <h3 className="text-3xl font-bold mt-1 flex items-baseline">
                      {kpi.value}
                      <span className="text-base ml-1 text-slate-400 dark:text-slate-500 font-normal">
                        {kpi.title.includes('درصد') ? '%' : kpi.title.includes('روز') ? 'روز' : ''}
                      </span>
                    </h3>
                    <p className={`text-xs font-medium flex items-center mt-1.5 ${
                      kpi.trend === 'up' ? 'text-emerald-500' : 'text-rose-500'
                    }`}>
                      {kpi.trend === 'up' ? (
                        <ArrowUp className="h-3.5 w-3.5 ml-1" />
                      ) : (
                        <ArrowDown className="h-3.5 w-3.5 ml-1" />
                      )}
                      {Math.abs(kpi.change)}%
                    </p>
                    <p className="text-xs text-slate-400 dark:text-slate-500 mt-1">
                      {kpi.details || kpi.description}
                    </p>
                  </div>
                  <div className={`p-2.5 rounded-lg ${iconBgColor}`}>
                    {kpi.icon}
                  </div>
                </div>
                <div className="mt-4 relative h-1.5 bg-slate-100 dark:bg-slate-700 rounded-full overflow-hidden">
                  <div
                    className={`absolute top-0 left-0 bottom-0 rounded-full transition-all duration-500 ease-in-out bg-gradient-to-r ${progressColor}`}
                    style={{ width: `${kpi.value}%` }}
                  />
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );
};

// کارت نمودار ترکیبی شاخص‌های سلامت
const HealthMetricsCard: React.FC = () => {
  const [chartType, setChartType] = useState('bar');
  return (
    <Card className="col-span-1 lg:col-span-2 overflow-hidden">
      <CardHeader className="px-6 py-5 flex flex-col sm:flex-row justify-between">
        <div>
          <CardTitle className="text-xl font-bold">شاخص‌های سلامت و ایمنی</CardTitle>
          <CardDescription>مقایسه عملکرد واحدها در بازه زمانی</CardDescription>
        </div>
        <div className="flex mt-3 sm:mt-0 space-x-2 space-x-reverse">
          <Button
            size="sm"
            variant={chartType === 'bar' ? "default" : "outline"}
            className={`px-2.5 h-9 ${chartType === 'bar' ? 'bg-tiffany hover:bg-tiffany-dark text-white' : ''}`}
            onClick={() => setChartType('bar')}
          >
            <BarChart3 className="h-4 w-4" />
          </Button>
          <Button
            size="sm"
            variant={chartType === 'line' ? "default" : "outline"}
            className={`px-2.5 h-9 ${chartType === 'line' ? 'bg-tiffany hover:bg-tiffany-dark text-white' : ''}`}
            onClick={() => setChartType('line')}
          >
            <LineChartIcon className="h-4 w-4" />
          </Button>
          <Button
            size="sm"
            variant={chartType === 'area' ? "default" : "outline"}
            className={`px-2.5 h-9 ${chartType === 'area' ? 'bg-tiffany hover:bg-tiffany-dark text-white' : ''}`}
            onClick={() => setChartType('area')}
          >
            <Layers className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent className="px-6 pb-6">
        <div className="h-80 w-full">
          <ResponsiveContainer width="100%" height="100%">
            {(() => {
              if (chartType === 'bar') {
                return (
                  <BarChart
                    data={healthMetricsData}
                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis yAxisId="left" orientation="left" />
                    <YAxis yAxisId="right" orientation="right" domain={[0, 100]} />
                    <Tooltip />
                    <Legend />
                    <Bar yAxisId="left" dataKey="کارخانه_A" fill="#2EC4B6" radius={[4, 4, 0, 0]} />
                    <Bar yAxisId="left" dataKey="کارخانه_B" fill="#52C4B9" radius={[4, 4, 0, 0]} />
                    <Bar yAxisId="right" dataKey="امتیاز_ایمنی" fill="#FFBB00" radius={[4, 4, 0, 0]} />
                  </BarChart>
                );
              } else if (chartType === 'line') {
                return (
                  <LineChart
                    data={healthMetricsData}
                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis yAxisId="left" orientation="left" />
                    <YAxis yAxisId="right" orientation="right" domain={[0, 100]} />
                    <Tooltip />
                    <Legend />
                    <Line yAxisId="left" type="monotone" dataKey="کارخانه_A" stroke="#2EC4B6" activeDot={{ r: 8 }} />
                    <Line yAxisId="left" type="monotone" dataKey="کارخانه_B" stroke="#52C4B9" />
                    <Line yAxisId="right" type="monotone" dataKey="امتیاز_ایمنی" stroke="#FFBB00" />
                  </LineChart>
                );
              } else {
                return (
                  <AreaChart
                    data={healthMetricsData}
                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Area type="monotone" dataKey="کارخانه_A" stroke="#2EC4B6" fill="#2EC4B6" fillOpacity={0.4} />
                    <Area type="monotone" dataKey="کارخانه_B" stroke="#52C4B9" fill="#52C4B9" fillOpacity={0.4} />
                    <Area type="monotone" dataKey="امتیاز_ایمنی" stroke="#FFBB00" fill="#FFBB00" fillOpacity={0.4} />
                  </AreaChart>
                );
              }
            })()}
          </ResponsiveContainer>
        </div>
      </CardContent>
    </Card>
  );
};

// کارت نمودار پای برای انواع حوادث
const IncidentTypesCard: React.FC = () => (
  <Card className="col-span-1 overflow-hidden">
    <CardHeader className="px-6 py-5">
      <CardTitle className="text-xl font-bold">توزیع انواع حوادث</CardTitle>
      <CardDescription>تفکیک حوادث گزارش شده براساس نوع</CardDescription>
    </CardHeader>
    <CardContent className="px-6 pb-6">
      <div className="h-80 w-full">
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={incidentTypeData}
              cx="50%"
              cy="50%"
              labelLine={false}
              outerRadius={120}
              innerRadius={50}
              fill="#8884d8"
              dataKey="مقدار"
              nameKey="name"
              label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
            >
              {incidentTypeData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip formatter={(value: number) => [`${value} مورد`, 'تعداد']} />
            <Legend verticalAlign="bottom" layout="horizontal" />
          </PieChart>
        </ResponsiveContainer>
      </div>
    </CardContent>
  </Card>
);

// کارت رادار برای شاخص‌های زیست‌محیطی
const EnvironmentalMetricsCard: React.FC = () => (
  <Card className="col-span-1 overflow-hidden">
    <CardHeader className="px-6 py-5">
      <CardTitle className="text-xl font-bold">شاخص‌های زیست‌محیطی</CardTitle>
      <CardDescription>مقایسه عملکرد شاخص‌های زیست‌محیطی دو واحد</CardDescription>
    </CardHeader>
    <CardContent className="px-6 pb-6">
      <div className="h-80 w-full">
        <ResponsiveContainer width="100%" height="100%">
          <RadarChart cx="50%" cy="50%" outerRadius={130} data={environmentalData}>
            <PolarGrid stroke="#e5e7eb" />
            <PolarAngleAxis dataKey="subject" />
            <PolarRadiusAxis angle={90} domain={[0, 100]} />
            <Radar name="واحد A" dataKey="A" stroke="#2EC4B6" fill="#2EC4B6" fillOpacity={0.3} />
            <Radar name="واحد B" dataKey="B" stroke="#FFBB00" fill="#FFBB00" fillOpacity={0.3} />
            <Legend />
            <Tooltip formatter={(value) => [`${value}`, 'امتیاز']} />
          </RadarChart>
        </ResponsiveContainer>
      </div>
    </CardContent>
  </Card>
);

// کارت نمودار ناحیه‌ای برای ارزیابی ریسک‌ها
const RiskAssessmentCard: React.FC = () => (
  <Card className="col-span-1 lg:col-span-2 overflow-hidden">
    <CardHeader className="px-6 py-5">
      <CardTitle className="text-xl font-bold">ارزیابی ریسک‌ها</CardTitle>
      <CardDescription>روند تغییرات سطوح ریسک در طول سال</CardDescription>
    </CardHeader>
    <CardContent className="px-6 pb-6">
      <div className="h-80 w-full">
        <ResponsiveContainer width="100%" height="100%">
          <AreaChart
            data={riskAssessmentData}
            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Legend verticalAlign="top" height={36} />
            <Area type="monotone" dataKey="ریسک‌های بالا" stroke="#D72638" fill="#D72638" stackId="1" fillOpacity={0.5} />
            <Area type="monotone" dataKey="ریسک‌های متوسط" stroke="#FFBB00" fill="#FFBB00" stackId="1" fillOpacity={0.5} />
            <Area type="monotone" dataKey="ریسک‌های پایین" stroke="#2EC4B6" fill="#2EC4B6" stackId="1" fillOpacity={0.5} />
          </AreaChart>
        </ResponsiveContainer>
      </div>
    </CardContent>
  </Card>
);

// کارت نمودار رتبه‌بندی ایمنی واحدها
const DepartmentSafetyCard: React.FC = () => (
  <Card className="col-span-1 lg:col-span-2 overflow-hidden">
    <CardHeader className="px-6 py-5">
      <CardTitle className="text-xl font-bold">رتبه‌بندی ایمنی واحدها</CardTitle>
      <CardDescription>مقایسه امتیاز ایمنی و درصد تکمیل اقدامات</CardDescription>
    </CardHeader>
    <CardContent className="px-6 pb-6">
      <div className="h-80 w-full">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={departmentSafetyData}
            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            layout="vertical"
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis type="number" domain={[0, 100]} />
            <YAxis dataKey="name" type="category" width={80} />
            <Tooltip formatter={(value) => [`${value}`, 'امتیاز']} />
            <Legend />
            <Bar dataKey="امتیاز" fill="#2EC4B6" name="امتیاز ایمنی" radius={[0, 4, 4, 0]} />
            <Bar dataKey="تکمیل" fill="#FFBB00" name="درصد تکمیل اقدامات" radius={[0, 4, 4, 0]} />
          </BarChart>
        </ResponsiveContainer>
      </div>
    </CardContent>
  </Card>
);

// کارت هشدارها و اعلانات مهم
const AlertsCard: React.FC = () => (
  <Card className="col-span-1 overflow-hidden">
    <CardHeader className="px-6 py-5 border-b border-slate-100 dark:border-slate-800">
      <div className="flex justify-between items-center">
        <CardTitle className="text-xl font-bold">هشدارها و اعلانات</CardTitle>
        <Badge variant="outline" className="bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800">
          {healthAlerts.length} مورد
        </Badge>
      </div>
    </CardHeader>
    <CardContent className="p-0">
      <div className="max-h-[420px] overflow-y-auto">
        <ul className="divide-y divide-slate-100 dark:divide-slate-800">
          {healthAlerts.map((alert) => (
            <li key={alert.id} className="p-4 hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors">
              <div className="flex">
                <div className={`p-2 rounded-full mr-3 ${
                  alert.level === 'high' ? 'bg-rose-100 text-rose-600 dark:bg-rose-900/30 dark:text-rose-400' :
                  alert.level === 'medium' ? 'bg-amber-100 text-amber-600 dark:bg-amber-900/30 dark:text-amber-400' :
                  'bg-slate-100 text-slate-600 dark:bg-slate-700 dark:text-slate-400'
                }`}>
                  {alert.icon}
                </div>
                <div>
                  <h4 className="font-medium text-slate-900 dark:text-slate-100">{alert.title}</h4>
                  <p className="text-sm text-slate-500 dark:text-slate-400 mt-1">{alert.description}</p>
                  <span className="text-xs text-slate-400 dark:text-slate-500 mt-2 block">{alert.time}</span>
                </div>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </CardContent>
    <CardFooter className="px-4 py-3 border-t border-slate-100 dark:border-slate-800 flex justify-between">
      <Button variant="ghost" size="sm" className="text-tiffany hover:text-tiffany-dark dark:text-tiffany-light dark:hover:text-tiffany">
        مشاهده همه هشدارها
      </Button>
      <Button variant="ghost" size="sm">
        <CheckCircle className="h-4 w-4 ml-1" />
        خواندن همه
      </Button>
    </CardFooter>
  </Card>
);

// کارت فعالیت‌های اخیر
const RecentActivitiesCard: React.FC = () => (
  <Card className="col-span-1 overflow-hidden">
    <CardHeader className="px-6 py-5 border-b border-slate-100 dark:border-slate-800">
      <CardTitle className="text-xl font-bold">فعالیت‌های اخیر</CardTitle>
    </CardHeader>
    <CardContent className="p-0">
      <div className="max-h-[420px] overflow-y-auto">
        <ul className="divide-y divide-slate-100 dark:divide-slate-800">
          {recentActivities.map((activity) => (
            <li key={activity.id} className="p-4 hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors">
              <div className="flex">
                <div className="p-2 rounded-full bg-slate-100 text-slate-600 dark:bg-slate-800 dark:text-slate-400 mr-3">
                  {activity.icon}
                </div>
                <div>
                  <h4 className="font-medium text-slate-900 dark:text-slate-100">{activity.title}</h4>
                  <p className="text-sm text-slate-500 dark:text-slate-400 mt-1">{activity.description}</p>
                  <span className="text-xs text-slate-400 dark:text-slate-500 mt-2 block">{activity.time}</span>
                </div>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </CardContent>
    <CardFooter className="px-4 py-3 border-t border-slate-100 dark:border-slate-800">
      <Button variant="ghost" size="sm" className="text-tiffany hover:text-tiffany-dark dark:text-tiffany-light dark:hover:text-tiffany w-full">
        مشاهده همه فعالیت‌ها
      </Button>
    </CardFooter>
  </Card>
);

// کارت رویدادهای آینده
const UpcomingEventsCard: React.FC = () => (
  <Card className="col-span-1 overflow-hidden">
    <CardHeader className="px-6 py-5 border-b border-slate-100 dark:border-slate-800">
      <div className="flex justify-between items-center">
        <CardTitle className="text-xl font-bold">رویدادهای آینده</CardTitle>
        <div className="flex space-x-1 space-x-reverse">
          <Button size="sm" variant="ghost" className="h-8 w-8 p-0">
            <ChevronRight className="h-4 w-4" />
          </Button>
          <Button size="sm" variant="ghost" className="h-8 w-8 p-0">
            <ChevronLeft className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </CardHeader>
    <CardContent className="p-0">
      <div className="max-h-[290px] overflow-y-auto">
        <ul className="divide-y divide-slate-100 dark:divide-slate-800">
          {upcomingEvents.map((event) => (
            <li key={event.id} className="p-4 hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors">
              <div className="flex items-start">
                <div className={`h-12 w-12 flex flex-col items-center justify-center rounded-lg mr-3 ${
                  event.type === 'emergency' ? 'bg-rose-100 text-rose-600 dark:bg-rose-900/30 dark:text-rose-400' :
                  event.type === 'training' ? 'bg-tiffany-100 text-tiffany-600 dark:bg-tiffany-900/30 dark:text-tiffany-400' :
                  event.type === 'audit' ? 'bg-amber-100 text-amber-600 dark:bg-amber-900/30 dark:text-amber-400' :
                  'bg-slate-100 text-slate-600 dark:bg-slate-700 dark:text-slate-400'
                }`}>
                  <span className="text-xs font-medium">{event.date.split(' ')[0]}</span>
                  <span className="text-lg font-bold">{event.date.split(' ')[1]}</span>
                </div>
                <div>
                  <h4 className="font-medium text-slate-900 dark:text-slate-100">{event.title}</h4>
                  <div className="flex items-center mt-1 space-x-2 space-x-reverse">
                    <span className="text-xs text-slate-600 dark:text-slate-400 flex items-center">
                      <Clock className="h-3 w-3 ml-1" />
                      {event.time}
                    </span>
                    <span className="text-xs text-slate-600 dark:text-slate-400 flex items-center">
                      <Map className="h-3 w-3 ml-1" />
                      {event.location}
                    </span>
                  </div>
                </div>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </CardContent>
    <CardFooter className="px-4 py-3 border-t border-slate-100 dark:border-slate-800 flex justify-between">
      <Button variant="ghost" size="sm" className="text-tiffany hover:text-tiffany-dark dark:text-tiffany-light dark:hover:text-tiffany">
        مشاهده تقویم کامل
      </Button>
      <Button variant="outline" size="sm">
        <Plus className="h-4 w-4 ml-1" />
        افزودن رویداد
      </Button>
    </CardFooter>
  </Card>
);

// داشبورد اصلی
// کامپوننت پس‌زمینه داینامیک با افکت‌های انیمیشن پیشرفته
const DynamicBackground: React.FC = () => {
  return (
    <div className="fixed inset-0 -z-10 overflow-hidden dark:opacity-40 opacity-20 pointer-events-none">
      {/* گرادیان‌های پس‌زمینه با افکت انیمیشن */}
      <div className="absolute -top-[40%] -right-[30%] w-[80%] h-[80%] rounded-full bg-gradient-to-br from-tiffany-light/20 via-tiffany/10 to-transparent blur-3xl animate-pulse-slow"></div>
      <div className="absolute -bottom-[40%] -left-[30%] w-[80%] h-[80%] rounded-full bg-gradient-to-tr from-blue-500/20 via-violet-500/10 to-transparent blur-3xl animate-pulse-slow animation-delay-2000"></div>
      <div className="absolute top-[20%] right-[20%] w-[30%] h-[30%] rounded-full bg-gradient-to-r from-amber-500/20 via-amber-400/10 to-transparent blur-2xl animate-pulse-slow animation-delay-1000"></div>
      <div className="absolute bottom-[10%] right-[30%] w-[20%] h-[20%] rounded-full bg-gradient-to-l from-emerald-500/20 via-emerald-400/10 to-transparent blur-2xl animate-pulse-slow animation-delay-3000"></div>
      
      {/* اشکال هندسی متحرک */}
      <div className="absolute top-[15%] left-[10%] w-24 h-24 border border-tiffany/20 rounded-xl rotate-12 animate-float"></div>
      <div className="absolute bottom-[25%] right-[15%] w-32 h-32 border border-amber-500/20 rounded-full rotate-12 animate-float-slow"></div>
      <div className="absolute top-[45%] right-[25%] w-20 h-20 border border-emerald-500/20 rounded-lg rotate-45 animate-float animation-delay-2000"></div>
      
      {/* خطوط اتصال */}
      <div className="absolute top-[30%] left-[20%] w-[60%] h-[1px] bg-gradient-to-r from-transparent via-slate-500/20 to-transparent"></div>
      <div className="absolute top-[60%] left-[10%] w-[80%] h-[1px] bg-gradient-to-r from-transparent via-slate-500/20 to-transparent"></div>
      
      {/* نقاط درخشان */}
      <div className="absolute top-[10%] left-[40%] w-1 h-1 bg-white rounded-full shadow-[0_0_10px_4px_rgba(56,189,248,0.5)] animate-pulse"></div>
      <div className="absolute top-[70%] left-[25%] w-1 h-1 bg-white rounded-full shadow-[0_0_10px_4px_rgba(236,72,153,0.5)] animate-pulse animation-delay-700"></div>
      <div className="absolute top-[30%] left-[80%] w-1 h-1 bg-white rounded-full shadow-[0_0_10px_4px_rgba(6,182,212,0.5)] animate-pulse animation-delay-1500"></div>
      <div className="absolute top-[55%] left-[65%] w-1 h-1 bg-white rounded-full shadow-[0_0_10px_4px_rgba(132,204,22,0.5)] animate-pulse animation-delay-2000"></div>
    </div>
  );
};

// کامپوننت گلاس کارد برای ایجاد افکت شیشه‌ای پیشرفته
interface GlassCardProps {
  children: React.ReactNode;
  className?: string;
  showControls?: boolean;
}

const GlassCard: React.FC<GlassCardProps> = ({
  children,
  className = "",
  showControls = true
}) => {
  const [isHovered, setIsHovered] = useState(false);
  
  return (
    <div 
      className={`
        relative overflow-hidden rounded-xl 
        border border-slate-200/50 dark:border-slate-700/50
        bg-white/80 dark:bg-slate-800/70 backdrop-blur-sm
        hover:shadow-lg hover:shadow-slate-200/20 dark:hover:shadow-slate-900/40
        transition-all duration-300 ease-in-out
        group
        ${className}
      `}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {showControls && (
        <div className="absolute top-2 right-2 z-50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex space-x-1 space-x-reverse">
          <button className="h-6 w-6 flex items-center justify-center rounded-full bg-white/80 dark:bg-slate-700/80 backdrop-blur-sm hover:bg-tiffany/20 border border-slate-200/50 dark:border-slate-600/50 transition-colors duration-200">
            <Maximize2 className="h-3 w-3 text-slate-600 dark:text-slate-300" />
          </button>
          <button className="h-6 w-6 flex items-center justify-center rounded-full bg-white/80 dark:bg-slate-700/80 backdrop-blur-sm hover:bg-amber-500/20 border border-slate-200/50 dark:border-slate-600/50 transition-colors duration-200">
            <Settings className="h-3 w-3 text-slate-600 dark:text-slate-300" />
          </button>
          <button className="h-6 w-6 flex items-center justify-center rounded-full bg-white/80 dark:bg-slate-700/80 backdrop-blur-sm hover:bg-rose-500/20 border border-slate-200/50 dark:border-slate-600/50 transition-colors duration-200">
            <X className="h-3 w-3 text-slate-600 dark:text-slate-300" />
          </button>
        </div>
      )}
      
      {/* افکت هاله در گوشه‌ها */}
      <div className={`absolute -top-20 -right-20 w-40 h-40 bg-tiffany/10 rounded-full blur-3xl transition-opacity duration-500 ${isHovered ? 'opacity-100' : 'opacity-0'}`}></div>
      <div className={`absolute -bottom-20 -left-20 w-40 h-40 bg-amber-500/5 rounded-full blur-3xl transition-opacity duration-500 ${isHovered ? 'opacity-100' : 'opacity-0'}`}></div>
      
      {/* خط تزئینی بالای کارت */}
      <div className="absolute top-0 left-0 right-0 h-[2px] bg-gradient-to-r from-transparent via-tiffany/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
      
      {children}
      
      {/* افکت هاور */}
      <div className="absolute inset-0 border-2 border-dashed border-tiffany/0 group-hover:border-tiffany/20 dark:group-hover:border-tiffany/20 opacity-0 group-hover:opacity-100 pointer-events-none rounded-xl transition-all duration-300"></div>
    </div>
  );
};

// کامپوننت قابل درگ با قابلیت تغییر وضعیت و کاستومایز شدن
interface DraggableSectionProps {
  children: React.ReactNode;
  className?: string;
  title?: string;
}

const DraggableSection: React.FC<DraggableSectionProps> = ({ 
  children, 
  className = "",
  title
}) => {
  const [isDragging, setIsDragging] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  
  return (
    <div 
      className={`relative transition-all duration-300 ${className} ${
        isDragging ? 'ring-2 ring-tiffany/50 shadow-xl' : ''
      } rounded-xl overflow-hidden group`}
      draggable={true}
      onDragStart={() => setIsDragging(true)}
      onDragEnd={() => setIsDragging(false)}
    >
      {/* دکمه‌های کاستومایز */}
      <div className="absolute top-2 left-2 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex space-x-1">
        <Button 
          size="sm" 
          variant="ghost" 
          className="h-6 w-6 p-0 rounded-full bg-white/80 dark:bg-slate-700/80 backdrop-blur-sm hover:bg-rose-500/20 border border-slate-200/50 dark:border-slate-600/50"
          onClick={() => setShowSettings(!showSettings)}
        >
          <Settings className="h-3 w-3 text-slate-600 dark:text-slate-300" />
        </Button>
      </div>
      
      {/* پنل تنظیمات کارت */}
      {showSettings && (
        <div className="absolute top-10 left-2 z-50 w-60 bg-white/90 dark:bg-slate-800/90 backdrop-blur-lg rounded-lg shadow-lg p-3 border border-slate-200/50 dark:border-slate-700/50">
          <h4 className="text-xs font-medium mb-2 text-slate-900 dark:text-slate-100">تنظیمات کارت</h4>
          <div className="space-y-3">
            <div className="space-y-1">
              <label className="text-xs text-slate-500 dark:text-slate-400">اندازه نمودار</label>
              <div className="grid grid-cols-4 gap-1">
                <button className="p-1 text-xs border border-slate-200 dark:border-slate-700 rounded hover:bg-tiffany/10 hover:border-tiffany/50">کوچک</button>
                <button className="p-1 text-xs border border-tiffany/50 bg-tiffany/10 rounded">متوسط</button>
                <button className="p-1 text-xs border border-slate-200 dark:border-slate-700 rounded hover:bg-tiffany/10 hover:border-tiffany/50">بزرگ</button>
                <button className="p-1 text-xs border border-slate-200 dark:border-slate-700 rounded hover:bg-tiffany/10 hover:border-tiffany/50">کامل</button>
              </div>
            </div>
            
            <div className="space-y-1">
              <label className="text-xs text-slate-500 dark:text-slate-400">دوره زمانی</label>
              <select className="w-full text-xs p-1.5 rounded border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800">
                <option>روزانه</option>
                <option>هفتگی</option>
                <option selected>ماهانه</option>
                <option>سالانه</option>
              </select>
            </div>
            
            <div className="flex justify-end">
              <Button 
                size="sm" 
                className="h-7 text-xs bg-tiffany hover:bg-tiffany-dark text-white rounded-lg"
                onClick={() => setShowSettings(false)}
              >
                اعمال تغییرات
              </Button>
            </div>
          </div>
        </div>
      )}
      
      {children}
      
      {/* نشان‌گر درگ و دراپ */}
      <div 
        className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 border-2 border-dashed border-tiffany/0 group-hover:border-tiffany/30 pointer-events-none rounded-xl"
      ></div>
      
      {/* دستگیره درگ و دراپ */}
      <div className="absolute bottom-2 right-2 z-10 h-5 w-5 opacity-0 group-hover:opacity-60 cursor-move flex items-center justify-center rounded-sm hover:bg-slate-200/50 dark:hover:bg-slate-700/50">
        <ChevronsUpDown className="h-3 w-3 text-slate-400" />
      </div>
    </div>
  );
};

// تنظیمات مد تاریک
const ThemeToggle: React.FC = () => {
  const [isDarkMode, setIsDarkMode] = useState(true);
  
  useEffect(() => {
    // تنظیم حالت تاریک به عنوان پیش‌فرض
    if (document.documentElement.classList.contains('light')) {
      document.documentElement.classList.remove('light');
      document.documentElement.classList.add('dark');
    }
  }, []);
  
  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode);
    document.documentElement.classList.toggle('dark');
    document.documentElement.classList.toggle('light');
  };
  
  return (
    <Button 
      variant="ghost" 
      size="sm" 
      onClick={toggleTheme} 
      className="h-10 w-10 p-0 rounded-full bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm hover:bg-slate-100/80 dark:hover:bg-slate-700/80 border border-slate-200/50 dark:border-slate-700/50 transition-all"
    >
      {isDarkMode ? (
        <Sun className="h-4 w-4 text-amber-500" />
      ) : (
        <Moon className="h-4 w-4 text-slate-600" />
      )}
      <span className="absolute -bottom-8 opacity-0 group-hover:opacity-100 text-xs bg-black/70 text-white px-2 py-1 rounded">تغییر تم</span>
    </Button>
  );
};

export default function HSESmartDashboard() {
  const [activeTab, setActiveTab] = useState('overview');
  const [showCustomizePanel, setShowCustomizePanel] = useState(false);
  const [layout, setLayout] = useState<string[]>([
    'kpi', 'health', 'incidents', 'environmental', 'risks', 'departments', 'alerts', 'activities', 'events', 'budget'
  ]);

  // خودکار فعال شدن حالت تاریک
  useEffect(() => {
    document.documentElement.classList.add('dark');
  }, []);

  return (
    <div className="min-h-screen relative pt-6 pb-12 dark:bg-slate-900 dark:text-slate-200">
      {/* پس‌زمینه داینامیک با افکت‌های پیشرفته */}
      <DynamicBackground />
      
      {/* نوار ابزار بالای صفحه */}
      <div className="sticky top-0 z-50 py-2 px-4 backdrop-blur-md bg-white/70 dark:bg-slate-900/70 border-b border-slate-200/50 dark:border-slate-700/30 mb-4">
        <div className="container mx-auto max-w-7xl flex justify-between items-center">
          <div className="flex items-center space-x-3 space-x-reverse">
            <div className="relative group">
              <Button 
                className={`
                  py-1.5 px-3 rounded-lg text-xs font-medium
                  ${showCustomizePanel 
                    ? 'bg-tiffany hover:bg-tiffany-dark text-white' 
                    : 'bg-white/90 dark:bg-slate-800/90 text-slate-700 dark:text-slate-200 hover:bg-tiffany/10 dark:hover:bg-tiffany/10 border border-slate-200/50 dark:border-slate-700/50'}
                  transition-all duration-300 ease-in-out shadow-sm
                `}
                onClick={() => setShowCustomizePanel(!showCustomizePanel)}
              >
                <div className="flex items-center">
                  <Settings className="h-3.5 w-3.5 mr-1.5" />
                  {showCustomizePanel ? 'در حال شخصی‌سازی' : 'شخصی‌سازی داشبورد'}
                </div>
              </Button>
              
              {/* پنل شخصی‌سازی داشبورد */}
              {showCustomizePanel && (
                <div className="absolute top-full right-0 mt-2 p-4 w-72 bg-white/95 dark:bg-slate-800/95 rounded-lg shadow-xl backdrop-blur-md border border-slate-200/70 dark:border-slate-700/70 z-50">
                  <div className="flex justify-between items-center mb-3">
                    <h4 className="text-sm font-medium text-slate-900 dark:text-slate-100">شخصی‌سازی داشبورد</h4>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="h-7 w-7 p-0 hover:bg-rose-100 dark:hover:bg-slate-700/80"
                      onClick={() => setShowCustomizePanel(false)}
                    >
                      <X className="h-4 w-4 text-slate-500" />
                    </Button>
                  </div>
                  
                  <div className="space-y-3">
                    <div>
                      <h5 className="text-xs font-medium mb-2 text-slate-700 dark:text-slate-300">چیدمان صفحه</h5>
                      <div className="grid grid-cols-2 gap-2">
                        <button className="p-2 text-xs bg-tiffany/10 border border-tiffany/40 rounded-md flex items-center justify-center">
                          <LayoutGrid className="h-3.5 w-3.5 ml-1.5" />
                          <span>گرید</span>
                        </button>
                        <button className="p-2 text-xs bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-md flex items-center justify-center">
                          <LayoutList className="h-3.5 w-3.5 ml-1.5" />
                          <span>لیست</span>
                        </button>
                      </div>
                    </div>
                    
                    <div>
                      <h5 className="text-xs font-medium mb-2 text-slate-700 dark:text-slate-300">ترتیب اجزا</h5>
                      <p className="text-xs text-slate-500 dark:text-slate-400 mb-2">موارد را با درگ و دراپ جابجا کنید</p>
                      <div className="space-y-1.5 max-h-[200px] overflow-y-auto pr-1">
                        {layout.map((item, index) => (
                          <div 
                            key={item} 
                            className="text-xs py-2 px-3 bg-white dark:bg-slate-800 rounded border border-slate-200 dark:border-slate-700 cursor-move flex justify-between items-center"
                          >
                            <span>{
                              item === 'kpi' ? 'شاخص‌های کلیدی عملکرد' :
                              item === 'health' ? 'نمودار سلامت و ایمنی' :
                              item === 'incidents' ? 'توزیع حوادث' :
                              item === 'environmental' ? 'شاخص‌های زیست‌محیطی' :
                              item === 'risks' ? 'ارزیابی ریسک‌ها' :
                              item === 'departments' ? 'رتبه‌بندی واحدها' :
                              item === 'alerts' ? 'هشدارها و اعلانات' :
                              item === 'activities' ? 'فعالیت‌های اخیر' :
                              item === 'events' ? 'رویدادهای پیش رو' :
                              item === 'budget' ? 'تخصیص بودجه' : item
                            }</span>
                            <div className="flex items-center space-x-1 space-x-reverse">
                              <Button variant="ghost" size="sm" className="h-5 w-5 p-0 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-sm">
                                <Eye className="h-3 w-3 text-slate-500" />
                              </Button>
                              <Button variant="ghost" size="sm" className="h-5 w-5 p-0 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-sm">
                                <ArrowUp className="h-3 w-3 text-slate-500" />
                              </Button>
                              <Button variant="ghost" size="sm" className="h-5 w-5 p-0 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-sm">
                                <ArrowDown className="h-3 w-3 text-slate-500" />
                              </Button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <div className="pt-2 border-t border-slate-200 dark:border-slate-700">
                      <Button className="w-full bg-tiffany hover:bg-tiffany-dark text-white text-xs py-2">
                        ذخیره تنظیمات
                      </Button>
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            <div className="hidden md:flex items-center space-x-3 space-x-reverse">
              <Button 
                variant="ghost"
                className="py-1.5 px-3 text-xs font-medium bg-white/90 dark:bg-slate-800/90 text-slate-700 dark:text-slate-200 border border-slate-200/50 dark:border-slate-700/50 rounded-lg shadow-sm"
              >
                <FileText className="h-3.5 w-3.5 ml-1.5 text-slate-500" />
                گزارش‌ها
              </Button>
              <Button 
                variant="ghost"
                className="py-1.5 px-3 text-xs font-medium bg-white/90 dark:bg-slate-800/90 text-slate-700 dark:text-slate-200 border border-slate-200/50 dark:border-slate-700/50 rounded-lg shadow-sm"
              >
                <Bell className="h-3.5 w-3.5 ml-1.5 text-slate-500" />
                اعلانات
              </Button>
            </div>
          </div>
          
          <div className="flex items-center space-x-2 space-x-reverse">
            <ThemeToggle />
            
            <Button 
              variant="ghost" 
              size="sm" 
              className="h-10 px-3 rounded-lg bg-white/90 dark:bg-slate-800/90 text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 border border-slate-200/50 dark:border-slate-700/50 shadow-sm hidden sm:flex"
            >
              <Download className="h-4 w-4 ml-1.5 text-slate-500" />
              <span className="text-xs">خروجی</span>
            </Button>
            
            <Button 
              size="sm" 
              className="h-10 px-3 rounded-lg bg-tiffany hover:bg-tiffany-dark text-white border-none shadow-md hover:shadow-lg transition-all duration-300"
            >
              <RefreshCcw className="h-4 w-4 ml-1.5" />
              <span className="text-xs">به‌روزرسانی</span>
            </Button>
          </div>
        </div>
      </div>
      
      <div className="px-4 py-2 lg:px-6 space-y-6 container mx-auto max-w-7xl">
        <DashboardHeader />
      
      {/* تب‌های داشبورد */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="mb-2">
        <TabsList className="mb-6 p-1 bg-white/60 dark:bg-slate-800/50 backdrop-blur-md rounded-xl border border-slate-200/50 dark:border-slate-700/30 shadow-sm overflow-hidden">
          <TabsTrigger value="overview" className="py-2.5 px-4 text-sm">
            <Layers className="h-4 w-4 ml-2" />
            نمای کلی
          </TabsTrigger>
          <TabsTrigger value="safety" className="py-2.5 px-4 text-sm">
            <ShieldCheck className="h-4 w-4 ml-2" />
            ایمنی
          </TabsTrigger>
          <TabsTrigger value="health" className="py-2.5 px-4 text-sm">
            <Heart className="h-4 w-4 ml-2" />
            سلامت
          </TabsTrigger>
          <TabsTrigger value="environment" className="py-2.5 px-4 text-sm">
            <TreePine className="h-4 w-4 ml-2" />
            محیط زیست
          </TabsTrigger>
          <TabsTrigger value="training" className="py-2.5 px-4 text-sm">
            <Clipboard className="h-4 w-4 ml-2" />
            آموزش
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="overview" className="space-y-6">
          <KeyPerformanceCards />
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <HealthMetricsCard />
            <IncidentTypesCard />
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <RiskAssessmentCard />
            <RecentActivitiesCard />
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <DepartmentSafetyCard />
            <UpcomingEventsCard />
          </div>
        </TabsContent>
        
        <TabsContent value="safety" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="col-span-1 lg:col-span-2 overflow-hidden">
              <CardHeader className="px-6 py-5">
                <CardTitle className="text-xl font-bold">روند بازرسی‌های ایمنی</CardTitle>
                <CardDescription>مقایسه امتیازات بازرسی با استانداردهای سازمانی</CardDescription>
              </CardHeader>
              <CardContent className="px-6 pb-6">
                <div className="h-80 w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart
                      data={safetyAuditData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis domain={[0, 100]} />
                      <Tooltip />
                      <Legend />
                      <Line type="monotone" dataKey="امتیاز" stroke="#2EC4B6" strokeWidth={2} dot={{ r: 5 }} activeDot={{ r: 8 }} />
                      <Line type="monotone" dataKey="استاندارد" stroke="#FFBB00" strokeWidth={2} strokeDasharray="5 5" />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
            
            <Card className="col-span-1 overflow-hidden">
              <CardHeader className="px-6 py-5">
                <CardTitle className="text-xl font-bold">تخصیص بودجه ایمنی</CardTitle>
                <CardDescription>توزیع بودجه بر اساس حوزه‌های کاری</CardDescription>
              </CardHeader>
              <CardContent className="px-6 pb-6">
                <div className="h-80 w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={budgetAllocationData}
                        cx="50%"
                        cy="50%"
                        outerRadius={120}
                        innerRadius={70}
                        dataKey="مقدار"
                        nameKey="name"
                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                      >
                        {budgetAllocationData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.fill} />
                        ))}
                      </Pie>
                      <Tooltip formatter={(value) => [`${value}%`, 'سهم از بودجه']} />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="col-span-1 overflow-hidden">
              <CardHeader className="px-6 py-5">
                <CardTitle className="text-xl font-bold">پیشرفت وظایف ایمنی</CardTitle>
                <CardDescription>درصد تکمیل وظایف کلیدی ایمنی</CardDescription>
              </CardHeader>
              <CardContent className="px-6 pb-6">
                <div className="h-80 w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={taskCompletionData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                      layout="vertical"
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis type="number" domain={[0, 100]} />
                      <YAxis dataKey="name" type="category" width={70} />
                      <Tooltip formatter={(value) => [`${value}%`, 'درصد تکمیل']} />
                      <Bar dataKey="تکمیل" fill="#2EC4B6" radius={[0, 4, 4, 0]}>
                        {taskCompletionData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.تکمیل > 90 ? '#10B981' : entry.تکمیل > 70 ? '#2EC4B6' : '#FFBB00'} />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
            
            <Card className="col-span-1 lg:col-span-2 overflow-hidden">
              <CardHeader className="px-6 py-5">
                <CardTitle className="text-xl font-bold">انطباق با استانداردها به تفکیک واحد</CardTitle>
                <CardDescription>نسبت انطباق با استانداردهای ایمنی</CardDescription>
              </CardHeader>
              <CardContent className="px-6 pb-6">
                <div className="h-80 w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <RadialBarChart 
                      cx="50%" 
                      cy="50%" 
                      innerRadius="20%" 
                      outerRadius="90%" 
                      barSize={20} 
                      data={complianceByLocationData}
                    >
                      <RadialBar
                        label={{ position: 'insideStart', fill: '#666', fontSize: 12 }}
                        background
                        dataKey="نسبت"
                        name="name"
                        fill="#2EC4B6"
                      />
                      <Legend 
                        iconSize={10} 
                        layout="vertical" 
                        verticalAlign="bottom"
                        align="center"
                        wrapperStyle={{ paddingTop: '20px' }}
                      />
                      <Tooltip formatter={(value: number) => [`${(value * 100).toFixed(0)}%`, 'نسبت انطباق']} />
                    </RadialBarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </div>
          
          <AlertsCard />
        </TabsContent>
        
        <TabsContent value="health" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="col-span-1 lg:col-span-2 overflow-hidden">
              <CardHeader className="px-6 py-5">
                <CardTitle className="text-xl font-bold">شاخص‌های سلامت کارکنان</CardTitle>
                <CardDescription>مقایسه امتیازات شاخص‌های سلامت با میانگین صنعت</CardDescription>
              </CardHeader>
              <CardContent className="px-6 pb-6">
                <div className="h-80 w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <ComposedChart
                      data={healthIndexScoreData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis domain={[0, 100]} />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="امتیاز" fill="#2EC4B6" barSize={30} radius={[4, 4, 0, 0]} />
                      <Line type="monotone" dataKey="میانگین" stroke="#FFBB00" strokeWidth={2} dot={{ strokeWidth: 2 }} />
                    </ComposedChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
            
            <Card className="col-span-1 overflow-hidden">
              <CardHeader className="px-6 py-5">
                <CardTitle className="text-xl font-bold">تکمیل آموزش‌های سلامت</CardTitle>
                <CardDescription>درصد تکمیل آموزش‌ها به تفکیک گروه</CardDescription>
              </CardHeader>
              <CardContent className="px-6 pb-6">
                <div className="h-80 w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={trainingCompletionData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis domain={[0, 100]} />
                      <Tooltip formatter={(value) => [`${value}%`, 'درصد تکمیل']} />
                      <Bar dataKey="امتیاز" fill="#2EC4B6" radius={[4, 4, 0, 0]}>
                        {trainingCompletionData.map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={
                              entry.امتیاز > 90 ? '#10B981' : 
                              entry.امتیاز > 75 ? '#2EC4B6' : 
                              entry.امتیاز > 60 ? '#FFBB00' : 
                              '#D72638'
                            } 
                          />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="environment" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card className="col-span-1 overflow-hidden">
              <CardHeader className="px-6 py-5">
                <CardTitle className="text-xl font-bold">کیفیت هوا، دما و رطوبت</CardTitle>
                <CardDescription>روند شاخص‌های محیطی در طول سال</CardDescription>
              </CardHeader>
              <CardContent className="px-6 pb-6">
                <div className="h-80 w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart
                      data={airQualityData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis />
                      <Tooltip />
                      <Legend />
                      <Line type="monotone" dataKey="AQI" stroke="#D72638" strokeWidth={2} />
                      <Line type="monotone" dataKey="دما" stroke="#FFBB00" strokeWidth={2} />
                      <Line type="monotone" dataKey="رطوبت" stroke="#2EC4B6" strokeWidth={2} />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
            
            <Card className="col-span-1 overflow-hidden">
              <CardHeader className="px-6 py-5">
                <CardTitle className="text-xl font-bold">شاخص‌های زیست‌محیطی</CardTitle>
                <CardDescription>مقایسه عملکرد شاخص‌های زیست‌محیطی</CardDescription>
              </CardHeader>
              <CardContent className="px-6 pb-6">
                <div className="h-80 w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <RadarChart cx="50%" cy="50%" outerRadius={130} data={environmentalData}>
                      <PolarGrid stroke="#e5e7eb" />
                      <PolarAngleAxis dataKey="subject" />
                      <PolarRadiusAxis angle={90} domain={[0, 100]} />
                      <Radar name="واحد A" dataKey="A" stroke="#2EC4B6" fill="#2EC4B6" fillOpacity={0.3} />
                      <Radar name="واحد B" dataKey="B" stroke="#FFBB00" fill="#FFBB00" fillOpacity={0.3} />
                      <Legend />
                      <Tooltip formatter={(value: number) => [`${value}`, 'امتیاز']} />
                    </RadarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="training" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="col-span-1 lg:col-span-2 overflow-hidden">
              <CardHeader className="px-6 py-5">
                <CardTitle className="text-xl font-bold">پیشرفت برنامه‌های آموزشی</CardTitle>
                <CardDescription>درصد تکمیل به تفکیک گروه‌های کاری</CardDescription>
              </CardHeader>
              <CardContent className="px-6 pb-6">
                <div className="h-80 w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={trainingCompletionData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="name" />
                      <YAxis domain={[0, 100]} />
                      <Tooltip formatter={(value) => [`${value}%`, 'درصد تکمیل']} />
                      <Bar dataKey="امتیاز" radius={[4, 4, 0, 0]}>
                        {trainingCompletionData.map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={
                              entry.امتیاز > 90 ? '#10B981' : 
                              entry.امتیاز > 75 ? '#2EC4B6' : 
                              entry.امتیاز > 60 ? '#FFBB00' : 
                              '#D72638'
                            } 
                          />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
            
            <UpcomingEventsCard />
          </div>
        </TabsContent>
      </Tabs>
      
      <div className="text-center text-sm text-slate-500 dark:text-slate-400 space-y-1">
        <p>* تمام داده‌ها و آمارها بر اساس ورودی‌های واقعی سازمان تولید شده‌اند</p>
        <p>** گزارش‌های تفصیلی در بخش "گزارش‌ها" در دسترس است</p>
      </div>
    </div>
  );
}